1. Install Wamp
	- Configure php.ini
	- Protect MySQL database : http://www.c4learn.com/php/change-mysql-root-password-in-wampserver/

2. Add these two paths to the environment variables:
C:\wamp\bin\php\php5.5.12
C:\wamp\bin\mysql\mysql5.6.17\bin

-------------------------------------------------------------------------------------------------------------
1.
 - Install composer at http://bit.ly/composer-win
 - check installation: composer -V
 - mkdir Sites && cd Sites
 - composer create-project symfony/framework-standard-edition starwarsevents @stable
 - composer create-project symfony/framework-standard-edition starwarsevents '~2.4'
 
2. Configure and launch app
- Enter to configure all settings to default
- cd starwarsevents
- php bin/console server:run -> If we have php5.4 or higher we use the built in server.
- http://127.0.0.1:8000

---------------------------------------------------------------------------------------------------------
We will use the symfony installer to create new symfony projects: https://github.com/symfony/symfony-installer

1. php -r "file_put_contents('symfony', file_get_contents('https://symfony.com/installer'));"
2. (echo @ECHO OFF & echo php "%~dp0symfony" %*) > symfony.bat
3. We should already have added the phpversion folder in our environment path. We can place the symfony and symfony.bat files in the same folder
4. If we have the cURL error 60-SSL certificate problem, we have to get the cacert.pem file from https://curl.haxx.se/ca/cacert.pem and place it in a folder that we will reference in our php.ini file.
Note: The php.ini file is : C:\wamp\bin\php\php5.5.12\php.ini
=> Uncomment the line ;curl.cainfo and configure as follows: curl.cainfo = "C:/wamp/certificate/cacert.pem".

1. symfony new my_project

2. symfony new my_project lts

3. symfony new my_project 2.8.1

4. symfony demo

OK  Symfony 2.8.14 was successfully installed. Now you can:

    * Change your current directory to C:\wamp\www\knp_university_symfony\Sites\001_events_manager

    * Configure your application in app/config/parameters.yml file.

    * Run your application:
        1. Execute the php app/console server:run command.
        2. Browse to the http://localhost:8000 URL.

    * Read the documentation at http://symfony.com/doc

------------------------------------------------------------------------------------------------------------------------------
- http://localhost:8000/config.php
Fix major problems.http://bit.ly/ep1-install

- http://localhost:8000/app.php and http://localhost:8000/app_dev.php are demo pages

- Delete the AppBundle Folder, delete its refences in routing.yml and AppKernel.php

- symfony already contains a .git ignore file that already has our basic ignore files.
git init && git add . && git commit -am "Initial commit". Note we don't commit the parameters.yml file but we do have a backup paramaters.yml.dist. All vendor specific files are downloaded through composer so we ignore them.

- To see available commands: php app/console

- Generate a bundle: php app/console generate:bundle
Are you planning on sharing this bundle across multiple applications? [no]: yes
Bundle namespace: Yoda/EventBundle
Bundle name [YodaEventBundle]: EventBundle
Target Directory [src/]:
Configuration format (annotation, yml, xml, php) [xml]: yml

 Generating a sample bundle skeleton into C:\wamp\www\knp_university_symfony\Sites\starwarsevents\app/../src/Yoda/EventBundle
  created .\app/../src/Yoda/EventBundle/
  created .\app/../src/Yoda/EventBundle/EventBundle.php
  created .\app/../src/Yoda/EventBundle/DependencyInjection/
  created .\app/../src/Yoda/EventBundle/DependencyInjection/EventExtension.php
  created .\app/../src/Yoda/EventBundle/DependencyInjection/Configuration.php
  created .\app/../src/Yoda/EventBundle/Controller/
  created .\app/../src/Yoda/EventBundle/Controller/DefaultController.php
  created .\app/../src/Yoda/EventBundle/Tests/Controller/
  created .\app/../src/Yoda/EventBundle/Tests/Controller/DefaultControllerTest.php
  created .\app/../src/Yoda/EventBundle/Resources/views/Default/
  created .\app/../src/Yoda/EventBundle/Resources/views/Default/index.html.twig
  created .\app/../src/Yoda/EventBundle/Resources/config/
  created .\app/../src/Yoda/EventBundle/Resources/config/services.yml
  created .\app/../src/Yoda/EventBundle/Resources/config/routing.yml
> Checking that the bundle is autoloaded
> Enabling the bundle inside C:\wamp\www\knp_university_symfony\Sites\starwarsevents\app\AppKernel.php
  updated .\app\AppKernel.php
> Importing the bundle's routes from the C:\wamp\www\knp_university_symfony\Sites\starwarsevents\app\config\routing.yml file
  updated .\app/config/routing.yml

If we refresh our browser we must now see Hello Word! onscreen at /
routing.yml includes Yoda/EventBundle/Resources/routing.yml

We can pass parameters to our route, which will be accessible to our Controller action:
event_homepage:
    path:     /{name}
    defaults: { _controller: EventBundle:Default:index }

    - For optional parameters: defaults: { _controller: EventBundle:Default:index, name: John Doe}
    - pass more parameters :   defaults: { _controller: EventBundle:Default:index, name: John Doe, count: 1000 }
    	We can add the $count parameter as an argument to our indexAction()
    	The order of the arguments does not matter. Symfony knows how to map each parameter with a function argument by name.

The line above shows us that we have to pass a name, the controller is EventBundle/Controller/DefaultController and the action for / is indexAction.

class DefaultController extends Controller
{
    public function indexAction($name)
    {
        return $this->render('EventBundle:Default:index.html.twig', ['name' => $name]);
    }
}

We reference the parameters as arguments in our indexAction method and render the index.html.twig view, passing it a name paameter.
{% extends 'base.html.twig' %}
{% block body %}
	<p>{{ name | capitalize }} is awesome</p>
{% endblock %}


To get all the URLS that our app has: php app\console debug:router

How a page is rendered
 - Symfony looks at each route until the URL matches a path
 - Symphony reads the _controller key and executes that funtion. The _controller of the route is EventBundle:Default:index => Call that function
 - Build a page in indexAction()

 To learn about namespaces: http://knpuniversity.com/screencast/php-namespaces-in-120-seconds

 Redirection, JSON and HTML response, database queries, form submission processing, email sending, all  happen in the controller.
 The big rule: Symfony actions must return a Symfony Response object.
 * include the Response class: use Symfony\Component\HttpFoundation\Response;
 * In indexAction: return new Response('This is a test'); and refresh -> In Dev Tools/Network we can see that the Content-type of the response is 'text/html'
 * We can also return a JSON object by using json_encode($data); But this still is enderred as text/html
  - We should either set the header of our $response object to application/json or use the JsonResponse class, which is better.

 IMPORTANT: controller actions must always return a Response object.

- Services = A PHP object that performs a task - example sending email, query database...
Everything that Symfony does is done by services. 
Services are found in the Service container, which is a PHP object.
We can tweek core services, even the router.
We can access the service container in a controller: $this->container

Note: One of the services in the container is called templating. 
This templating object has a render($view_file_name, $array_of_variables_to_pass_to_template) method, which renders a string.
We must hence create and return a Response object, passing the content to this object.
for example 
$templating = $this->container->get('templating'); 
$content = $templating->render('EventBundle:Default:index.html.twig', ['name' => $name]);
return new Response($content);
EventBundle:Default:index.html.twig = Bundlename:DirectoryName:templatefile

As rendering a template is a common thing, the $templating object has a renderResponse($view_file_name, $array).
Instead od putting the content in a string, it renders a Response object for us, which we return directly to render our view.

$templating = $this->container->get('templating');
return $templating->renderResponse('EventBundle:Default:index.html.twig', ['name' => $name]);

Our controller extends Symfony's own base Controller, which provides a shortcut to render views.  
We can locate the Controller.php file : public function render($view, array $parameters = array(), Response $response = null)
This function does exactly what we did above. We can hence replace the previous code.
TODO: See what all functions of the Controller class does for us. Controllers methods are simply functions who return a Response object.
Since we have access to the service container, we have access to every service in our app.
To see all services: 

For example in this long list we have: php app\console debug:container
service id     Class name
templating    Symfony\Bundle\TwigBundle\TwigEngine
